"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getObservatoryWsUri = exports.startIOSSession = void 0;
// @ts-ignore
const appium_xcuitest_driver_1 = __importDefault(require("appium-xcuitest-driver"));
const child_process_1 = require("child_process");
const logger_1 = require("../logger");
const observatory_1 = require("./observatory");
const setupNewIOSDriver = async (caps) => {
    const iosArgs = {
        javascriptEnabled: true,
    };
    const iosdriver = new appium_xcuitest_driver_1.default(iosArgs);
    const capsCopy = Object.assign({}, caps, { newCommandTimeout: 0 });
    await iosdriver.createSession(capsCopy);
    return iosdriver;
};
exports.startIOSSession = async (caps) => {
    logger_1.log.info(`Starting an IOS proxy session`);
    const iosdriver = await setupNewIOSDriver(caps);
    const observatoryWsUri = exports.getObservatoryWsUri(iosdriver);
    return Promise.all([
        iosdriver,
        observatory_1.connectSocket(await observatoryWsUri, caps.retryBackoffTime, caps.maxRetryCount),
    ]);
};
exports.getObservatoryWsUri = async (proxydriver) => {
    const urlObject = observatory_1.processLogToGetobservatory(proxydriver.logs.syslog.logs);
    const { udid, realDevice } = proxydriver.opts;
    if (realDevice) {
        // @todo check if `brew install usbmuxd` is needed
        logger_1.log.info(`Running on iOS real device, doing "iproxy" now`);
        const args = [urlObject.port, urlObject.port, udid];
        logger_1.log.debug(`iproxy ${urlObject.port} ${urlObject.port} ${udid}`);
        const cmd = child_process_1.spawn(`iproxy`, args);
        let stdout = ``;
        cmd.stdout.on(`data`, (data) => {
            stdout += data;
            if (stdout.includes(`waiting for connection`)) {
                logger_1.log.info(`"iproxy" started successfully`);
            }
            else {
                logger_1.log.debug(`"iproxy" not started successfully ${stdout}`);
            }
        });
    }
    else {
        logger_1.log.info(`Running on iOS simulator, no "iproxy" needed`);
    }
    return urlObject.toJSON();
};
//# sourceMappingURL=ios.js.map